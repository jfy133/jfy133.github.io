<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bioinformatics | James A. Fellows Yates</title>
    <link>https://jfy133.github.com/tag/bioinformatics/</link>
      <atom:link href="https://jfy133.github.com/tag/bioinformatics/index.xml" rel="self" type="application/rss+xml" />
    <description>bioinformatics</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-gb</language><copyright>Â© 2021 James A. Fellows Yates</copyright><lastBuildDate>Tue, 16 Mar 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://jfy133.github.com/media/icon_hub6dbd972940fdff31c6d4775500fc8c9_20277_512x512_fill_lanczos_center_3.png</url>
      <title>bioinformatics</title>
      <link>https://jfy133.github.com/tag/bioinformatics/</link>
    </image>
    
    <item>
      <title>Reproducible, portable, and efficient ancient genome reconstruction with nf-core/eager</title>
      <link>https://jfy133.github.com/publication/2021-03-16-reproducible-portable-efficient-ancient-genome-reconstruction/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://jfy133.github.com/publication/2021-03-16-reproducible-portable-efficient-ancient-genome-reconstruction/</guid>
      <description>&lt;p&gt;Open access publication.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Community-curated and standardised metadata of published ancient metagenomic samples with AncientMetagenomeDir</title>
      <link>https://jfy133.github.com/publication/2021-01-26-community-curated-and-standardised-metadata-of-published-ancient-metagenomic-samples/</link>
      <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://jfy133.github.com/publication/2021-01-26-community-curated-and-standardised-metadata-of-published-ancient-metagenomic-samples/</guid>
      <description>&lt;p&gt;Open access publication.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Community-curated and standardised metadata of published ancient metagenomic samples with AncientMetagenomeDir</title>
      <link>https://jfy133.github.com/publication/2020-09-03-community-curated-and-standardised-metadata-of-published-ancient-metagenomic-samples/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://jfy133.github.com/publication/2020-09-03-community-curated-and-standardised-metadata-of-published-ancient-metagenomic-samples/</guid>
      <description>&lt;p&gt;Open access publication.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reproducible, portable, and efficient ancient genome reconstruction with nf-core/eager</title>
      <link>https://jfy133.github.com/publication/2020-06-12-reproducible-portable-efficient-ancient-genome-reconstruction/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://jfy133.github.com/publication/2020-06-12-reproducible-portable-efficient-ancient-genome-reconstruction/</guid>
      <description>&lt;p&gt;Open access publication.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>All Possible NCBI Taxonomy Ranks</title>
      <link>https://jfy133.github.com/post/2020-07-23-all-ncbi-taxonomy-ranks/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://jfy133.github.com/post/2020-07-23-all-ncbi-taxonomy-ranks/</guid>
      <description>&lt;p&gt;It was bothering me that nowhere on the NCBI website are all possible taxonomic
&amp;lsquo;ranks&amp;rsquo; actually described.&lt;/p&gt;
&lt;p&gt;I eventually decided to go back to basics and literally download the raw data
the NCBI taxonomy website is based on - the infamous &lt;code&gt;taxonomy.dmp&lt;/code&gt;, find the
column that gives a rank for &lt;em&gt;every single tax. ID&lt;/em&gt;, and collapse to all unique
values.&lt;/p&gt;
&lt;p&gt;To do this I downloaded and extracted the taxonomy dump as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget ftp://ftp.ncbi.nih.gov/pub/taxonomy/new_taxdump/new_taxdump.zip
unzip new_taxdump.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then after hunting through all the files, the one I wanted was &lt;code&gt;nodes.dmp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The rank is recorded in the third column,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ head nodes.dmp
1 | 1 | no rank |   | 8 | 0 | 1 | 0 | 0 | 0 | 0 | 0 |   |   ||  0 | 0 | 0 |
2 | 131567  | superkingdom  |   | 0 | 0 | 11  | 0 | 0 | 0 | 0 | 0 |   | ||  0 | 0 | 1 |
6 | 335928  | genus |   | 0 | 1 | 11  | 1 | 0 | 1 | 0 | 0 |   |   ||  0 | 0 | 1 |
7 | 6 | species | AC  | 0 | 1 | 11  | 1 | 0 | 1 | 1 | 0 |   |   ||  1 | 0 | 1 |
9 | 32199 | species | BA  | 0 | 1 | 11  | 1 | 0 | 1 | 1 | 0 |   |   ||  1 | 0 | 1 |
10  | 1706371 | genus |   | 0 | 1 | 11  | 1 | 0 | 1 | 0 | 0 |   |   ||  0 | 0 | 1 |
11  | 1707  | species | CG  | 0 | 1 | 11  | 1 | 0 | 1 | 1 | 0 | effective current name; |   |   | 1 | 0 | 1 |
13  | 203488  | genus |   | 0 | 1 | 11  | 1 | 0 | 1 | 0 | 0 |   |   ||  0 | 0 | 1 |
14  | 13  | species | DT  | 0 | 1 | 11  | 1 | 0 | 1 | 1 | 0 |   |   ||  1 | 0 | 1 |
16  | 32011 | genus |   | 0 | 1 | 11  | 1 | 0 | 1 | 0 | 0 |   |   ||  0 | 0 | 1 |

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So to extract the column using and collapse to single values, run the following
bash-fu&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat nodes.dmp | cut -d &#39;|&#39; -f 3  | sort | uniq
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You get the following result&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;biotype
clade
class
cohort
family
forma
forma specialis
genotype
genus
infraclass
infraorder
isolate
kingdom
morph
no rank
order
parvorder
pathogroup
phylum
section
series
serogroup
serotype
species
species group
species subgroup
strain
subclass
subcohort
subfamily
subgenus
subkingdom
suborder
subphylum
subsection
subspecies
subtribe
subvariety
superclass
superfamily
superkingdom
superorder
superphylum
tribe
varietas
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this doesn&amp;rsquo;t actually give you the hierarchy of all the wierd and
wonderful &amp;lsquo;custom&amp;rsquo; groups taxonomists have come up with. However I found by
googling &amp;lsquo;NCBI taxonomy &amp;lt;random_rank&amp;gt;&amp;rsquo; I could find enough examples that told me
approximately where they fell compared to the standard ranks (even if they are
technically analogous e.g. strain vs varietas)&lt;/p&gt;
&lt;p&gt;The ones I did find:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parvorder - comes after order&lt;/li&gt;
&lt;li&gt;section - comes after genus&lt;/li&gt;
&lt;li&gt;&amp;lsquo;strain&amp;rsquo;, &amp;lsquo;morph&amp;rsquo;, &amp;lsquo;forma specialis&amp;rsquo; - comes after species&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Gentle introduction to nf-core/eager</title>
      <link>https://jfy133.github.com/post/2020-03-17-nfcore-eager-tutorial/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://jfy133.github.com/post/2020-03-17-nfcore-eager-tutorial/</guid>
      <description>&lt;p&gt;I have written a tutorial in the form of a slideshow, which step-by-step
introduces a new user to &lt;a href=&#34;https://nf-co.re/eager&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nf-core/eager&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;nf-core/eager is a reproducible and portable pipeline for pre-processing and performing standard ancient DNA
screening analysis.&lt;/p&gt;
&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=&#34;90%&#34; height=&#34;500&#34; src=&#34;https://jfy133.github.io/uploads/presentations/intro-to-nfcore-eager.html&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Or in full screen here: &lt;a href=&#34;https://jfy133.github.io/uploads/presentations/intro-to-nfcore-eager.html&#34; title=&#34;:include :type=iframe width=100% height=600px&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Intro to nf-core/eager&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pvclust Node Values In ggtree</title>
      <link>https://jfy133.github.com/post/2019-06-18-pvclust-nodevalues-in-ggtree/</link>
      <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://jfy133.github.com/post/2019-06-18-pvclust-nodevalues-in-ggtree/</guid>
      <description>&lt;p&gt;I recently was using the R package &lt;a href=&#34;http://stat.sys.i.kyoto-u.ac.jp/prog/pvclust/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;pvclust&lt;/code&gt;&lt;/a&gt; to test the
&amp;lsquo;robusticity&amp;rsquo; of clusters in a microbiome-related clustering analysis. While &lt;code&gt;pvclust&lt;/code&gt; provides it&amp;rsquo;s own plots via &lt;code&gt;plot()&lt;/code&gt;  on a &lt;code&gt;pvclust&lt;/code&gt; object, this plots the dendrogram in  base R. For readability and customisability reasons I prefer using the packages &lt;code&gt;ggplot2&lt;/code&gt; and &lt;code&gt;ggtree&lt;/code&gt; for making my figures. However, I was having a hard time to extract the node uncertainty values from the &lt;code&gt;pvclust&lt;/code&gt; object  and integrate them into a generic R &lt;code&gt;phylo&lt;/code&gt; object for plotting the dendrogram in ggtree.&lt;/p&gt;
&lt;p&gt;Fortunately, a bit of googling (a couple of days&amp;hellip;) showed me someone else had already solved the problem of transferring additional &lt;code&gt;hclust&lt;/code&gt; information into a &lt;code&gt;phylo&lt;/code&gt; object but in a different context. The &lt;code&gt;fastbap&lt;/code&gt; package has the function &lt;a href=&#34;https://github.com/gtonkinhill/fastbaps/blob/master/R/as.phylo.hclust.node.attributes.R&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;as.phylo.hclust.node.attributes()&lt;/code&gt;&lt;/a&gt;&lt;code&gt;which essentially does what I needed to do - i.e. when calculating the node numbers from each merge event, also store with the same node number the corresponding attribute, or in this case,&lt;/code&gt;pvclust` AU value.&lt;/p&gt;
&lt;p&gt;I then modified this function slightly to make it more consistent with how &lt;code&gt;pvclust&lt;/code&gt; will display the values in the base R plot (rounding and converting to a &amp;lsquo;percentage&amp;rsquo;). Note that this outputs in the &lt;code&gt;phylo&lt;/code&gt; object the metadata &lt;code&gt;node.label&lt;/code&gt;, not as &lt;code&gt;node.attributes&lt;/code&gt; as in the original &lt;code&gt;fastbaps&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;So in summary:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## 1. Make pvclust object e.g.
hclust_boot &amp;lt;- pvclust::pvclust(otu_matrix,
                 method.hclust = selected_method,
                 method.dist = &amp;quot;euclidean&amp;quot;,
                 nboot = 1000,
                 parallel = T)

## 2. Set modified fastbaps function
as.phylo.pvclust.node.attributes &amp;lt;- function(x, attribute)
{
  N &amp;lt;- dim(x$merge)[1]
  edge &amp;lt;- matrix(0L, 2*N, 2)
  edge.length &amp;lt;- numeric(2*N)
  ## `node&#39; gives the number of the node for the i-th row of x$merge
  node &amp;lt;- integer(N)
  node[N] &amp;lt;- N + 2L
  node.attributes &amp;lt;- rep(NA, N)
  cur.nod &amp;lt;- N + 3L
  j &amp;lt;- 1L
  for (i in N:1) {
    edge[j:(j + 1), 1] &amp;lt;- node[i]
    for (l in 1:2) {
      k &amp;lt;- j + l - 1L
      y &amp;lt;- x$merge[i, l]
      if (y &amp;gt; 0) {
        edge[k, 2] &amp;lt;- node[y] &amp;lt;- cur.nod
        cur.nod &amp;lt;- cur.nod + 1L
        edge.length[k] &amp;lt;- x$height[i] - x$height[y]
        node.attributes[edge[k, 1] - (N + 1)] &amp;lt;- attribute[i]
      } else {
        edge[k, 2] &amp;lt;- -y
        edge.length[k] &amp;lt;- x$height[i]
        node.attributes[edge[k, 1] -  (N + 1)] &amp;lt;- attribute[i]
      }
    }
    j &amp;lt;- j + 2L
  }

  if (is.null(x$labels))
    x$labels &amp;lt;- as.character(1:(N + 1))
  
  ## MODIFICATION: clean up node.attributes so they are in same format in 
  ## pvclust plots
  node.attributes &amp;lt;- as.character(round(node.attributes * 100, 0))
  node.attributes[1] &amp;lt;- NA
  
  obj &amp;lt;- list(edge = edge, edge.length = edge.length / 2,
              tip.label = x$labels, Nnode = N, node.label = node.attributes)
  class(obj) &amp;lt;- &amp;quot;phylo&amp;quot;
  stats::reorder(obj)
}

## 3. Use the modified fastbaps function by accessing the hclust object in first 
## position, and the corresponding au values from the edges list entry.
hclust_boot_phylo &amp;lt;- as.phylo.pvclust.node.attributes(hclust_boot$hclust, 
                                                     hclust_boot$edges$au)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To display the values on the tree with &lt;code&gt;ggtree&lt;/code&gt; you can then run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggtree(hclust_boot_phylo  aes(x, y)) +
    geom_text2(aes(subset = !isTip, label = label)) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;as described in the &lt;code&gt;ggtree&lt;/code&gt; &lt;a href=&#34;https://guangchuangyu.github.io/software/ggtree/faq/#&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FAQ&lt;/a&gt; under the section &amp;ldquo;bootstrap values from newick format&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sequin Submission to Genbank Tutorial</title>
      <link>https://jfy133.github.com/post/2017-08-03-sequin-genbank-submission/</link>
      <pubDate>Thu, 03 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://jfy133.github.com/post/2017-08-03-sequin-genbank-submission/</guid>
      <description>&lt;p&gt;As I came to the end of my M.Sc. and writing the corresponding journal article,
one thing I was aware of was that all previous papers on woolly mammoth
mitchondrial genomes to NCBI&amp;rsquo;s GenBank database. To continue with this
established &amp;lsquo;tradition&amp;rsquo;, I decided to investigate how to do this. Worringly, most people I spoke to didn&amp;rsquo;t have very positive views on this
procdure, saying that it was complicated, error prone and badly documented and
that it wasn&amp;rsquo;t worth my time. In fact, with a bit of help from the authors of
some of the previous papers and with NCBI itself, the overall task ended up
being easier than expected (admittedly after a considerable bit of trial and
error).&lt;/p&gt;
&lt;p&gt;Here, I describe the eventual steps that I did to (successfully!) annotate a
set of mtGenomes and make a submission to GenBank. However, note that these
instructions are only valid for this use-case, and would not be necessarily
valid for other situations.&lt;/p&gt;
&lt;p&gt;In this case, we assume that you have multiple
sequences of a species that already has an annotated reference sequence on
GenBank. I use here the &amp;lsquo;Krause&amp;rsquo; reference (Accession: NC_007596.2) and my
reconstructed mtGenomes.&lt;/p&gt;
&lt;h1 id=&#34;preparation&#34;&gt;Preparation&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Download the program &lt;code&gt;Sequin&lt;/code&gt; from &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/Sequin/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; (If running Ubuntu 16.04 might have to install libxp6 from the PPA &lt;a href=&#34;https://bugs.launchpad.net/ubuntu/&amp;#43;source/libxp/&amp;#43;bug/1517884/comments/11&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Download the reference sequence from Genbank in FASTA format and the FeatureTable format.&lt;/li&gt;
&lt;li&gt;Using a multisequence aligner tool like &lt;a href=&#34;http://www.megasoftware.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MEGA&lt;/a&gt; or &lt;a href=&#34;http://www.geneious.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geneious&lt;/a&gt;, align your sequences to the reference, and export the file as a FASTA file (make sure to export gaps as Ns, and not &amp;lsquo;-&amp;rsquo; as in the documentation, and keep the reference sequence!).&lt;/li&gt;
&lt;li&gt;To save time later, you now want to change the FASTA headers for each sequnce to the NCBI format, adding as much information as you can using the &amp;lsquo;modifiers&amp;rsquo; listed &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/Sequin/modifiers.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. An example of one of my headers is as so:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; &amp;gt;JK2760 [organism=Mammuthus primigenius] [country=Germany] [isolate=JK2760] Mammuthus primigenius isolate JK2760 mitochondrion, partial genome
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the reference sequence you should also add the tag &lt;code&gt;[acc=NC_007596.2]&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;using-sequin&#34;&gt;Using Sequin&lt;/h1&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Next we can start &lt;code&gt;Sequin&lt;/code&gt;, select &amp;lsquo;NCBI GenBank&amp;rsquo; and &amp;lsquo;Start new submission&amp;rsquo;.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/1-load_sequin.png&#34; alt=&#34;Load Sequin&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Set the release date of the data (for example if you want to release on the same day as your paper is published - note you can update this later) and add a tentative title for the study.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/2-submission_info_1.png&#34; alt=&#34;Submission Information&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Set you name, phone and email (fax can be skipped).
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/3-submission_info_2.png&#34; alt=&#34;Submission Information&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Enter the names of the authors of the study.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/4-submission_info_3.png&#34; alt=&#34;Submission Information&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Enter the submitting institution address (fax can be skipped).
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/5-submission_info_4.png&#34; alt=&#34;Submission Information&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Select the &amp;lsquo;use normal submission dialog&amp;rsquo; option.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/6-start_submission_dialog.png&#34; alt=&#34;Start Submission&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Select &amp;lsquo;Population Study&amp;rsquo;, &amp;lsquo;Alignment&amp;rsquo; and &amp;lsquo;Original submission&amp;rsquo;.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/7-submission_type.png&#34; alt=&#34;Submission Type&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Now you can import your FASTA alignment through the &amp;lsquo;Import Alignment&amp;rsquo; button and select the following options:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Trim Ns at the end of sequences: yes.&lt;/li&gt;
&lt;li&gt;Specify molecule: &amp;lsquo;Genomic DNA&amp;rsquo; (apply to all).&lt;/li&gt;
&lt;li&gt;Specify topology: &amp;lsquo;linear&amp;rsquo; (apply to all).
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/8-import_alignment.png&#34; alt=&#34;Import&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/9-set_molecule_information.png&#34; alt=&#34;Set Molecular&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;13&#34;&gt;
&lt;li&gt;Select &amp;lsquo;Illumina&amp;rsquo;, &amp;lsquo;assembled sequences&amp;rsquo; and input your assembly program (in my case it is &lt;code&gt;bwa&lt;/code&gt; and version &amp;lsquo;0.7&amp;rsquo;).
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/10-set_sequencing_information.png&#34; alt=&#34;Sequencing Info&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Next you can add various information like organisms, locations (e.g. here I selected mitochondrion) and genetic codes (to apply to all you can select the header). You can keep the genetic code as &amp;lsquo;standard&amp;rsquo; or change to &amp;lsquo;Vertebrate Mitochondrial&amp;rsquo;. Some of this will have already been imported based on your FASTA headers.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/11-add_sequence_metadata_1.png&#34; alt=&#34;Seq metadata&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/12-add_sequence_metadata_2.png&#34; alt=&#34;Seq metadata&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;You can skip the protein step.&lt;/li&gt;
&lt;li&gt;You can also skip annotation (select &amp;lsquo;none&amp;rsquo;) and &amp;lsquo;Continue to record viewer&amp;rsquo;.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/13-skip_protein_annotation.png&#34; alt=&#34;Skip&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/14-record_viewer.png&#34; alt=&#34;Record viewer&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;First, it is best to annotate any runs of Ns as sequencing gaps (as per advice from the NCBI helpdesk). You can do this by doing the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;In record viewer Go to Search Validate &amp;gt; Validate.&lt;/li&gt;
&lt;li&gt;Double click on a &amp;lsquo;run of Ns&amp;rsquo; error.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/15-validation_window.png&#34; alt=&#34;Validate&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;In the sequence viewer, type in the start position (-1) in the &amp;lsquo;Go to&amp;rsquo; box.&lt;/li&gt;
&lt;li&gt;Then click and drag until all the Ns are selected.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/16-add_sequence_gap_1.png&#34; alt=&#34;Sequence Gap&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Then go to Features &amp;gt; Remaining Features &amp;gt; misc_features and under the &amp;lsquo;Properties&amp;rsquo; and then &amp;lsquo;Comment&amp;rsquo; tab you can add &amp;lsquo;sequencing gap, estimated length 119 bp&amp;rsquo;.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/17-add_sequence_gap_2.png&#34; alt=&#34;Sequence Gap&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;18&#34;&gt;
&lt;li&gt;Once all of those are done, in the Record Viewer you need to select from the drop down menu the reference sequence (in this case NC_007596.2) and then File &amp;gt; Open the Genbank (flat)file or the feature table. This should automatically load all the annotations of the original sequence, also &amp;lsquo;importing&amp;rsquo; features that in the latest version of Sequin fail due to conflicts (e.g. I could not manually make a &lt;code&gt;/trans_exep&lt;/code&gt;, but when I imported it gives an error but keeps the feature).&lt;/li&gt;
&lt;li&gt;Finally in the Record Viewer you can go Edit &amp;gt; Feature Propagate. This will copy over all of the annotations on the reference sequnce to your other sequences, but doing the correct DNA to amino acid translation.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://jfy133.github.com/uploads/images/18-propagate_features.png&#34; alt=&#34;Propagate&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;You should now do another &amp;lsquo;validate&amp;rsquo; to find any errors. For example a couple of my translated amino acid sequences began with XXXXXX, so the &lt;code&gt;Sequin&lt;/code&gt; couldn&amp;rsquo;t find the start codon and thus failed. I just removed these feature entries (and informed NCBI staff).&lt;/li&gt;
&lt;li&gt;Once you have no failures, you can go in Record Viewer to &amp;lsquo;File &amp;gt; Prepare Submission&amp;rsquo; and send the corresponding file to NCBI genbank as per the instructions. &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/books/NBK53709/#gbankquickstart.Submission_using_Sequin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once done, after a few days you should recieve a message from the NCBI either with
corrections to be made or a list of accession numbers, which will go live on
the date you selected in Sequin.&lt;/p&gt;
&lt;p&gt;To update or to get the release date changed you can just email them again at
the same address (you don&amp;rsquo;t need to do a resubmission or use sequin).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nf-core/eager</title>
      <link>https://jfy133.github.com/project/nf-core_eager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jfy133.github.com/project/nf-core_eager/</guid>
      <description>&lt;p&gt;nf-core/eager is a scalable and reproducible bioinformatics best-practise processing pipeline for genomic NGS sequencing data, with a focus on ancient DNA (aDNA) data. It is ideal for the (palaeo)genomic analysis of humans, animals, plants, microbes and even microbiomes.&lt;/p&gt;
&lt;p&gt;The pipeline is built using Nextflow, a workflow tool to run tasks across multiple compute infrastructures in a very portable manner. It comes with docker containers making installation trivial and results highly reproducible. The pipeline pre-processes raw data from FASTQ inputs, or preprocessed BAM inputs. It can align reads and performs extensive general NGS and aDNA specific quality-control on the results. It comes with docker, singularity or conda containers making installation trivial and results highly reproducible.&lt;/p&gt;
&lt;p&gt;I co-lead development, and the current maintainer of the pipeline.&lt;/p&gt;
&lt;p&gt;The pipeline was published in &lt;a href=&#34;https://doi.org/10.7717/peerj.10947&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PeerJ&lt;/a&gt; (open access).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
